{
  "metadata": {
    "name": "New JSNB",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "<!DOCTYPE html>\n<html lang=\"en\">\n    \n    <style>\n        body {\n            margin: 0;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            background-color: #70c5ce;\n        }\n        canvas {\n            background-color: #fff;\n            border: 2px solid #000;\n        }\n        #overlay {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: rgba(0, 0, 0, 0.7);\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            flex-direction: column;\n            color: #fff;\n            font-family: sans-serif;\n        }\n        button {\n            padding: 10px 20px;\n            background-color: #FFDD57;\n            border: none;\n            font-size: 20px;\n            cursor: pointer;\n            margin-top: 10px;\n        }\n\t\t#game{\n\t\t\talign-items: centre;\n\t\t}\n    </style>\n<body>\n    <div id=\"overlay\">\n        <h1>Flappy Bird</h1>\n        <button id=\"startButton\">Start Game</button>\n    </div>\n\t<div id=\"game\" align = 'center'>\n <canvas id=\"gameCanvas\" width=\"480\" height=\"720\"></canvas>\n   </div>\n\n\n\n</body>\n</html>\n",
      "status": "",
      "output": "\n\n    \n    <style>\n        body {\n            margin: 0;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            background-color: #70c5ce;\n        }\n        canvas {\n            background-color: #fff;\n            border: 2px solid #000;\n        }\n        #overlay {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: rgba(0, 0, 0, 0.7);\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            flex-direction: column;\n            color: #fff;\n            font-family: sans-serif;\n        }\n        button {\n            padding: 10px 20px;\n            background-color: #FFDD57;\n            border: none;\n            font-size: 20px;\n            cursor: pointer;\n            margin-top: 10px;\n        }\n\t\t#game{\n\t\t\talign-items: centre;\n\t\t}\n    </style>\n\n    <div id=\"overlay\" style=\"display: flex;\">\n        <h1>Flappy Bird</h1>\n        <button id=\"startButton\" style=\"display: block;\">Restart Game</button>\n    </div>\n\t<div id=\"game\" align=\"center\">\n <canvas id=\"gameCanvas\" width=\"480\" height=\"720\"></canvas>\n   </div>\n\n\n\n\n\n",
      "type": "html"
    },
    {
      "code": "        const canvas = document.getElementById('gameCanvas');\n        const ctx = canvas.getContext('2d');\n        const overlay = document.getElementById('overlay');\n        const startButton = document.getElementById('startButton');\n        let score = 0;\n        let gameStarted = false;\n        let gameOver = false;\n\n\n        // Bird properties\n        let bird = {\n            x: 50,\n            y: 150,\n            radius: 12,\n            gravity: 3,\n            lift: -10,\n            velocity: 0\n        };\n\n        // Pipes properties\n        let pipes = [];\n        let pipeWidth = 50;\n        let pipeGap = 250;\n        let pipeSpeed = 1.5;\n        let frameCount = 0;\n\n        function drawBird() {\n            ctx.beginPath();\n            ctx.arc(bird.x, bird.y, bird.radius, 0, Math.PI * 2);\n            ctx.fillStyle = \"#FFDD57\";\n            ctx.fill();\n            ctx.closePath();\n        }\n\n        function drawPipes() {\n            pipes.forEach(pipe => {\n                ctx.fillStyle = \"#3D9140\";\n                ctx.fillRect(pipe.x, 0, pipeWidth, pipe.topHeight);\n                ctx.fillRect(pipe.x, canvas.height - pipe.bottomHeight, pipeWidth, pipe.bottomHeight);\n            });\n        }\n\n        function updatePipes() {\n            if (frameCount % 100 === 0) {\n                let topHeight = Math.random() * (canvas.height - pipeGap - 100) + 50;\n                let bottomHeight = canvas.height - pipeGap - topHeight;\n                pipes.push({\n                    x: canvas.width,\n                    topHeight: topHeight,\n                    bottomHeight: bottomHeight,\n                    passed: false\n                });\n            }\n\n            pipes = pipes.filter(pipe => pipe.x + pipeWidth > 0);\n\n            pipes.forEach(pipe => {\n                pipe.x -= pipeSpeed;\n                if (!pipe.passed && pipe.x + pipeWidth < bird.x) {\n                    score++;\n                    pipe.passed = true;\n                }\n            });\n        }\n\n        function detectCollisions() {\n            for (let pipe of pipes) {\n                if (\n                    bird.x + bird.radius > pipe.x &&\n                    bird.x - bird.radius < pipe.x + pipeWidth &&\n                    (bird.y - bird.radius < pipe.topHeight || bird.y + bird.radius > canvas.height - pipe.bottomHeight)\n                ) {\n                    gameOver = true;\n                }\n            }\n\n            if (bird.y + bird.radius >= canvas.height) {\n\t\t\t  \tbird.y = -canvas.height + bird.radius;\n                gameOver = false;\n            }\n            if (bird.y - bird.radius <= 0) {\n\t\t\t  \tbird.y = canvas.height - bird.radius\n                gameOver = false;\n            }\n        }\n\n        function resetGame() {\n            bird.y = 240;\n            bird.velocity = 0;\n            pipes = [];\n            frameCount = 0;\n            score = 0;\n            gameOver = false;\n        }\n\n        function gameLoop() {\n            if (!gameStarted || gameOver) return;\n\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n            // Update bird\n            bird.velocity += bird.gravity;\n            bird.y += bird.velocity;\n            // Update pipes\n            updatePipes();\n\n            // Draw everything\n            drawBird();\n            drawPipes();\n\n            // Detect collisions\n            detectCollisions();\n\n            // Draw score\n            ctx.fillStyle = \"#000\";\n            ctx.font = \"20px Arial\";\n            ctx.fillText(\"Score: \" + score, 10, 30);\n\n            if (gameOver) {\n                overlay.style.display = \"flex\";\n                startButton.textContent = \"Restart Game\";\n                startButton.style.display = \"block\";\n                return;\n            }\n\n            frameCount++;\n            requestAnimationFrame(gameLoop);\n        }\n\n        // Voice Control - getUserMedia and AudioContext\n        let audioContext;\n        let analyser;\n        let dataArray;\n\n        function startVoiceControl() {\n            audioContext = new (window.AudioContext || window.webkitAudioContext)();\n            navigator.mediaDevices.getUserMedia({ audio: true })\n                .then(stream => {\n                    let source = audioContext.createMediaStreamSource(stream);\n                    analyser = audioContext.createAnalyser();\n                    source.connect(analyser);\n                    analyser.fftSize = 256;\n                    dataArray = new Uint8Array(analyser.frequencyBinCount);\n\n                    getAudioLevel();\n                })\n                .catch(err => {\n                    console.error(\"Error accessing microphone\", err);\n                });\n        }\n\t\tlet sound = false;\n        function getAudioLevel() {\n            analyser.getByteFrequencyData(dataArray);\n            let sum = dataArray.reduce((a, b) => a + b, 0);\n            let volume = sum / dataArray.length;\n\t\t\t\n\t\t    switch(Math.floor(volume/10)){\n\t\t\t\n\t\t\t  case 3: bird.lift = -5; sound = true;break;\n\t\t\t  case 4: bird.lift = -7; sound = true;break;\n\t\t\t  case 5: bird.lift = -9; sound = true;break;\n\t\t\t  case 6: bird.lift = -11; sound = true;break;\n\t\t\t  case 7: bird.lfit = -13; sound = true;break;\n\t\t\t  case 8: bird.lift = -15; sound = true;break;\n\t\t\t  default: bird.lift = 0;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t  if (Math.floor(volume/10) >= 9){\n\t\t\t\tbird.lift = -17; sound = true;\n\t\t  }\n\n            if (sound && !gameOver) {\n\t\t\t     bird.velocity = bird.lift;\n\t\t\t}\n\n            requestAnimationFrame(getAudioLevel);\n        }\n\n        let first_start = true;\n\n        // Start game\n        startButton.addEventListener('click', () => {\n            overlay.style.display = \"none\";\n            resetGame();\n            gameStarted = true;\n            gameOver = false;\n            if (first_start){\n                startVoiceControl();\n                first_start = false;\n            }\n            gameLoop();\n        });",
      "status": "[14]<br><span style=\"font-size:8px\">1ms<span></span></span>",
      "output": "",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}
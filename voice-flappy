{
  "metadata": {
    "name": "New JSNB",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "<!DOCTYPE html>\n<html lang=\"en\">\n    \n    <style>\n        body {\n            margin: 0;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            background-color: #70c5ce;\n        }\n        canvas {\n            background-color: #fff;\n            border: 2px solid #000;\n        }\n        #overlay {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: rgba(0, 0, 0, 0.7);\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            flex-direction: column;\n            color: #fff;\n            font-family: sans-serif;\n        }\n        button {\n            padding: 10px 20px;\n            background-color: #FFDD57;\n            border: none;\n            font-size: 20px;\n            cursor: pointer;\n            margin-top: 10px;\n        }\n    </style>\n<body>\n    <div id=\"overlay\">\n        <h1>Flappy Bird</h1>\n        <button id=\"startButton\">Start Game</button>\n    </div>\n    <canvas id=\"gameCanvas\" width=\"480\" height=\"720\"></canvas>\n\n\n\n</body>\n</html>\n",
      "status": "",
      "output": "\n\n    \n    <style>\n        body {\n            margin: 0;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            height: 100vh;\n            background-color: #70c5ce;\n        }\n        canvas {\n            background-color: #fff;\n            border: 2px solid #000;\n        }\n        #overlay {\n            position: absolute;\n            top: 0;\n            left: 0;\n            width: 100%;\n            height: 100%;\n            background: rgba(0, 0, 0, 0.7);\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            flex-direction: column;\n            color: #fff;\n            font-family: sans-serif;\n        }\n        button {\n            padding: 10px 20px;\n            background-color: #FFDD57;\n            border: none;\n            font-size: 20px;\n            cursor: pointer;\n            margin-top: 10px;\n        }\n    </style>\n\n    <div id=\"overlay\">\n        <h1>Flappy Bird</h1>\n        <button id=\"startButton\">Start Game</button>\n    </div>\n    <canvas id=\"gameCanvas\" width=\"480\" height=\"720\"></canvas>\n\n\n\n\n\n",
      "type": "html"
    },
    {
      "code": "        const canvas = document.getElementById('gameCanvas');\n        const ctx = canvas.getContext('2d');\n        const overlay = document.getElementById('overlay');\n        const startButton = document.getElementById('startButton');\n        let score = 0;\n        let gameStarted = false;\n        let gameOver = false;\n\n        // Bird properties\n        let bird = {\n            x: 50,\n            y: 150,\n            radius: 12,\n            gravity: 0.6,\n            lift: -12,\n            velocity: 0\n        };\n\n        // Pipes properties\n        let pipes = [];\n        let pipeWidth = 50;\n        let pipeGap = 250;\n        let pipeSpeed = 1.5;\n        let frameCount = 0;\n\n        function drawBird() {\n            ctx.beginPath();\n            ctx.arc(bird.x, bird.y, bird.radius, 0, Math.PI * 2);\n            ctx.fillStyle = \"#FFDD57\";\n            ctx.fill();\n            ctx.closePath();\n        }\n\n        function drawPipes() {\n            pipes.forEach(pipe => {\n                ctx.fillStyle = \"#3D9140\";\n                ctx.fillRect(pipe.x, 0, pipeWidth, pipe.topHeight);\n                ctx.fillRect(pipe.x, canvas.height - pipe.bottomHeight, pipeWidth, pipe.bottomHeight);\n            });\n        }\n\n        function updatePipes() {\n            if (frameCount % 100 === 0) {\n                let topHeight = Math.random() * (canvas.height - pipeGap - 100) + 50;\n                let bottomHeight = canvas.height - pipeGap - topHeight;\n                pipes.push({\n                    x: canvas.width,\n                    topHeight: topHeight,\n                    bottomHeight: bottomHeight,\n                    passed: false\n                });\n            }\n\n            pipes = pipes.filter(pipe => pipe.x + pipeWidth > 0);\n\n            pipes.forEach(pipe => {\n                pipe.x -= pipeSpeed;\n                if (!pipe.passed && pipe.x + pipeWidth < bird.x) {\n                    score++;\n                    pipe.passed = true;\n                }\n            });\n        }\n\n        function detectCollisions() {\n            for (let pipe of pipes) {\n                if (\n                    bird.x + bird.radius > pipe.x &&\n                    bird.x - bird.radius < pipe.x + pipeWidth &&\n                    (bird.y - bird.radius < pipe.topHeight || bird.y + bird.radius > canvas.height - pipe.bottomHeight)\n                ) {\n                    gameOver = true;\n                }\n            }\n\n            if (bird.y + bird.radius >= canvas.height || bird.y - bird.radius <= 0) {\n                gameOver = true;\n            }\n        }\n\n        function resetGame() {\n            bird.y = 240;\n            bird.velocity = 0;\n            pipes = [];\n            frameCount = 0;\n            score = 0;\n            gameOver = false;\n        }\n\n        function gameLoop() {\n            if (!gameStarted || gameOver) return;\n\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n            // Update bird\n            bird.velocity += bird.gravity;\n            bird.y += bird.velocity;\n            // Update pipes\n            updatePipes();\n\n            // Draw everything\n            drawBird();\n            drawPipes();\n\n            // Detect collisions\n            detectCollisions();\n\n            // Draw score\n            ctx.fillStyle = \"#000\";\n            ctx.font = \"20px Arial\";\n            ctx.fillText(\"Score: \" + score, 10, 30);\n\n            if (gameOver) {\n                overlay.style.display = \"flex\";\n                startButton.textContent = \"Restart Game\";\n                startButton.style.display = \"block\";\n                return;\n            }\n\n            frameCount++;\n            requestAnimationFrame(gameLoop);\n        }\n\n        function startVoiceControl() {\n\t\t  \t\tscrib.show(\"startVoiceControl\");\n\t\t  \t\tgetAudioLevel();\n\n\n        }\n\t\t   let dataArray;\n\t\t   navigator.mediaDevices.getUserMedia({ audio: true })\n\t\t  .then(stream => {\n\t\t\tconst audioContext = new AudioContext();\n\t\t\tconst analyser = audioContext.createAnalyser();\n\t\t\tconst microphone = audioContext.createMediaStreamSource(stream);\n\t\t\tmicrophone.connect(analyser);\n\t\t\tanalyser.fftSize = 256;\n\t\t\tdataArray = new Uint8Array(analyser.frequencyBinCount);\n\n\t\t\tgetAudioLevel();\n\t\t\t// Now you can process the audio data using analyser.getFloatTimeDomainData() or analyser.getByteTimeDomainData()\n\t\t  })\n\t\t  .catch(error => console.error(error));\n\n\n\n        function getAudioLevel() {\n\t\t  \tscrib.show(\"getAudioLevel\");\n            analyser.getByteFrequencyData(dataArray);\n            let suml = dataArray.reduce((a, b) => a + b, 0);\n            let volume = suml / dataArray.length;\n\n            if (volume > 40 && !gameOver) {\n\t\t\t  \tscrib.show(\"fly!\")\n                bird.velocity = bird.lift; \n            }\n\n           // requestAnimationFrame(getAudioLevel);\n        }\n\n\n        // Start game\n        startButton.addEventListener('click', () => {\n            overlay.style.display = \"none\";\n            resetGame();\n            gameStarted = true;\n            gameOver = false;\n            gameLoop();\n\t\t    startVoiceControl();\n        });\n\n",
      "status": "[42]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "getAudioLevel <br>",
      "type": "code"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}